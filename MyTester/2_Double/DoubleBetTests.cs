using Betting.Core;
using Logging;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.SmartInspect;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json.Linq;
using Placer.Ecambi;
using Placer.Sport888;
using System;
using System.Collections.Generic;
using System.Text;

namespace MyTester
{
    [TestClass]
    public class DoubleBetTests
    {
        private BetType betType;
        private double stake;
        private bool ew;
        private BetslipHelper helper;
        private JArray outcomes;
        private ILogger logger;

        [TestInitialize]
        public void Init()
        {
            betType = BetType.Double;
            stake = 0.01;
            ew = false;
            helper = new BetslipHelper();
            outcomes = InitOutcomes();
            logger = InitLogger();

            logger.LogDebug($"Was generated outcome:\n{outcomes.GetDump()}");
        }
        [TestMethod]
        public void Get_Success_ValidateCoupon_Tests()
        {
            using (logger.BeginScope(LoggerHelper.GetCaller()))
            {
                var toValidateCoupon = helper.CreateCouponToValidate(betType, outcomes, true);

                logger.LogDebug("Generated to validate coupon:\n" + toValidateCoupon.GetDump());
                logger.LogDebug("Validate coupon was got from site:\n" + ToValidateCouponBySite["requestCoupon"].GetDump());

                Assert.IsTrue(JToken.DeepEquals(toValidateCoupon, ToValidateCouponBySite["requestCoupon"]));
            }
        }
        [TestMethod]
        public void Get_Success_PlaceBetCoupon_Tests()
        {
            using (logger.BeginScope(LoggerHelper.GetCaller()))
            {
                var placeBet
                    = helper.GenerateCouponToPlaceBet(outcomes, CheckedCouponBySite, betType, stake, ew);

                logger.LogDebug("Validate coupon:\n" + CheckedCouponBySite.GetDump());
                logger.LogDebug("Generated place bet coupon:\n" + placeBet.GetDump());
                logger.LogDebug("Place bet coupon was got from site:\n" + PlaceBetBySite.GetDump());

                Assert.IsTrue(JToken.DeepEquals(placeBet, PlaceBetBySite));
            }
        }

        /**** Data was generated by site ****/
        private JToken ToValidateCouponBySite
        {
            get
            {
                var json = "{\"requestCoupon\":{\"type\":\"RCT_SYSTEM\",\"odds\":[5000,4000],\"outcomeIds\":[[2697432703],[2697432752]],\"selection\":[[],[]],\"betsPattern\":\"111\",\"isUserLoggedIn\":true}}";
                return JToken.Parse(json);
            }
        }

        private JToken PlaceBetBySite
        {
            get
            {
                var json = "{\"id\":1,\"trackingData\":{\"hasTeaser\":false,\"isBetBuilderCombination\":false,\"selectedOutcomes\":[{\"id\":2697432703,\"outcomeId\":2697432703,\"betofferId\":2197879125,\"eventId\":1006025536,\"approvedOdds\":5000,\"oddsApproved\":true,\"approvedEachWayFractionMilli\":200,\"approvedEachWayPlaceLimit\":3,\"eachWayFractionMilli\":200,\"eachWayPlaceLimit\":3,\"eachWayApproved\":true,\"isLiveBetoffer\":false,\"isPrematchBetoffer\":true,\"fromBetBuilder\":false,\"source\":\"Event List View\"},{\"id\":2697432752,\"outcomeId\":2697432752,\"betofferId\":2197879131,\"eventId\":1006025537,\"approvedOdds\":4000,\"oddsApproved\":true,\"approvedEachWayFractionMilli\":250,\"approvedEachWayPlaceLimit\":3,\"eachWayFractionMilli\":250,\"eachWayPlaceLimit\":3,\"eachWayApproved\":true,\"isLiveBetoffer\":false,\"isPrematchBetoffer\":true,\"fromBetBuilder\":false,\"source\":\"Event List View\"}]},\"requestCoupon\":{\"allowOddsChange\":\"AOCT_NO\",\"odds\":[5000,4000],\"stakes\":[10],\"outcomeIds\":[[2697432703],[2697432752]],\"type\":\"RCT_COMBINATION\",\"selection\":[[],[]]}}";
                return JToken.Parse(json);
            }
        }

        private JToken CheckedCouponBySite
        {
            get
            {
                var json = "{\"responseCoupon\":{\"status\":200,\"requestCoupon\":{\"type\":\"RCT_SYSTEM\",\"outcomeIds\":[[2697432703],[2697432752]],\"odds\":[5000,4000],\"betsPattern\":\"111\",\"allowOddsChange\":\"AOCT_NO\",\"selection\":[[],[]],\"suggestedRetailPunterCategory\":null}}}";
                return JToken.Parse(json)["responseCoupon"]["requestCoupon"];
            }
        }
        /****************************************/
        private JArray InitOutcomes()
        {
            // horse and event info
            var json =
                "[{ \"id\": 2697432703, \"outcomeId\": 2697432703, \"betofferId\": 2197879125, \"eventId\": 1006025536, \"approvedOdds\": 5000, \"oddsApproved\": true, \"approvedEachWayFractionMilli\": 200, \"approvedEachWayPlaceLimit\": 3, \"eachWayFractionMilli\": 200, \"eachWayPlaceLimit\": 3, \"eachWayApproved\": true, \"isLiveBetoffer\": false, \"isPrematchBetoffer\": true, \"fromBetBuilder\": false, \"source\": \"Event List View\" }, " +
                "{ \"id\": 2697432752, \"outcomeId\": 2697432752, \"betofferId\": 2197879131, \"eventId\": 1006025537, \"approvedOdds\": 4000, \"oddsApproved\": true, \"approvedEachWayFractionMilli\": 250, \"approvedEachWayPlaceLimit\": 3, \"eachWayFractionMilli\": 250, \"eachWayPlaceLimit\": 3, \"eachWayApproved\": true, \"isLiveBetoffer\": false, \"isPrematchBetoffer\": true, \"fromBetBuilder\": false, \"source\": \"Event List View\" }]";
            return JToken.Parse(json) as JArray;
        }

        private ILogger InitLogger()
        {
            AppLogger.LoggerFactory.AddSmartInspect(new SmartInspectConfiguration
            {
                AppName = "Tester",
                Enabled = true,
                Level = LogLevel.Trace,
                DefaultLevel = LogLevel.Trace,
                Connections = @"pipe(reconnect=""true"", reconnect.interval=""5"", async.enabled=""true"", async.throttle=""false"")"
            });
            return AppLogger.CreateLogger("Main");
        }
    }
}
